FROM ubuntu:bionic

ARG LLVM_VERSION
ENV LLVM_VERSION=$LLVM_VERSION

RUN apt-get update && apt-get install -y curl gnupg &&\
    llvmRepository="\n\
deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\n\
deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic main\n\
deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${LLVM_VERSION} main\n\
deb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-${LLVM_VERSION} main\n" &&\
    echo $llvmRepository >> /etc/apt/sources.list && \
    curl -L https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4052245BD4284CDD

RUN apt-get update && apt-get install -y \
      bison \
      cmake \
      flex \
      g++ \
      git \
      libelf-dev \
      zlib1g-dev \
      clang-${LLVM_VERSION} \
      libclang-${LLVM_VERSION}-dev \
      libclang-common-${LLVM_VERSION}-dev \
      libclang1-${LLVM_VERSION} \
      llvm-${LLVM_VERSION} \
      llvm-${LLVM_VERSION}-dev \
      llvm-${LLVM_VERSION}-runtime \
      libllvm${LLVM_VERSION} \
      systemtap-sdt-dev \
      python3

# libbpfcc-dev in Ubuntu 18.04 & 18.10 do not meet the requirements for
# bpftrace, so we use upstream bcc package.
RUN [ `uname -m` = 'x86_64' ] && \
    { echo "deb https://repo.iovisor.org/apt/bionic bionic main" | tee /etc/apt/sources.list.d/iovisor.list && \
      apt-get update && apt-get install -y libbcc; } || \
    echo "skipped x86_64-only step"

# Upstream bcc only packages for x86_64, so we build from source for arm64.
# Peg the build to bcc v0.11.0.
WORKDIR /
RUN [ `uname -m` = 'aarch64' ] && \
    { curl -L https://github.com/iovisor/bcc/releases/download/v0.11.0/bcc-src-with-submodule.tar.gz --output /bcc.tar.gz && \
      tar xvf /bcc.tar.gz && \
      cd /bcc && mkdir build && cd build && cmake .. && make install -j4 && \
      cp src/cc/libbcc.a /usr/local/lib64/libbcc.a && \
      cp src/cc/libbcc-loader-static.a /usr/local/lib64/libbcc-loader-static.a && \
      cp src/cc/libbpf.a /usr/local/lib64/libbpf.a; } || \
    echo "skipped arm64-only step"


COPY build.sh /build.sh
RUN chmod 755 /build.sh
ENTRYPOINT ["bash", "/build.sh"]
